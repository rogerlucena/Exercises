#include <iostream>
#include <vector>

using namespace std;

// https://www.interviewbit.com/problems/repeating-subsequence/
// DP

// Given a string A, find if there is any subsequence that repeats itself.
// A subsequence of a string is defined as a sequence of characters generated by deleting 
// some characters in the string without changing the order of the remaining characters.

// NOTE : sub-sequence length should be greater than or equal to 2.

// Constraints:
// 1 <= length(A) <= 100

// Solution idea: find the longest repeating subsequence - if the length > 1, return 1.
// Now, to find longest repeating subsequence, lets try finding the longest common subsequence between 
// the string A and itself (LCS(A, A)).
// The only restriction we want to impose is that you cannot match a character with its replica in the other string.
// In other words, if S1 and S2 are the replicas of the string for which we want to 
// find LCS, S1[i] != S2[i] for all index i.

// The longest common subsequence with ia != ib for every char A[ia] == B[ib] in the subsequence
int LCS(string &A, int ia, string &B, int ib, vector<vector<int>> &m) {
	if(m[ia][ib] != -1) {
		return m[ia][ib];
	}

	if(ia == A.size() || ib == B.size()) {
		m[ia][ib] = 0;
	} else if(A[ia] == B[ib] && ia != ib) {
		m[ia][ib] = 1 + LCS(A, ia+1, B, ib+1, m);
	} else {
		m[ia][ib] = max(
			LCS(A, ia+1, B, ib, m),
			LCS(A, ia, B, ib+1, m)
		);
	}

	return m[ia][ib];
}

int anytwo(string A) {
	if(A.size() < 2) {
		return 0;
	}

	vector<vector<int>> m (A.size()+1, vector<int>(A.size()+1, -1));
	return LCS(A, 0, A, 0, m) > 1;
}


int main() {
	string A = "abab"; // ans: 1
	// string A = "abba"; // ans: 0

	cout << "Answer: " << anytwo(A) << endl;

	return 0;
}